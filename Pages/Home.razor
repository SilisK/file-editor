@page "/"

@using System.IO
@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime JSRuntime

<PageTitle>File Editor</PageTitle>

<header style="display:flex;align-items:center;gap:1em;">
    <img src="icon-192.png" width=36 style="b" />
    <h1 style="margin:0;">
        File Editor
    </h1>
</header>

<div style="display:grid;place-items:center;">
    <h3 style="opacity:0.085;">Read-only</h3>
    <!-- Display Area Container -->
    <div style="max-width:360px;width:100%;min-height:360px;background-color:whitesmoke;display:grid;place-items:center;">
        <!-- Display Area -->
        <div style="width:100%;display:grid;">
            <!-- Image Preview -->
            @if (selectedFile != null && !string.IsNullOrEmpty(imagePreviewUrl))
            {
                <img id="file-image" src="@imagePreviewUrl" alt="display image" style="max-width:100%;" />
            }
            @if (selectedFile?.ContentType == "application/pdf")
            {
                <iframe src="@pdfDataUrl" width="100%" height="600px" style="border:1px solid black;"></iframe>
            }
        </div>
    </div>
    <!-- Metadata Area Container -->
    <div style="max-width:360px;width:100%;padding:0.25em;">
        <h3 style="text-align:center;">Metadata</h3>
        <ul style="display:grid;gap:0.25em;list-style:none;padding:0;">
            <li>
                <b>File Name:</b>
                <span>@selectedFile?.Name</span>
            </li>
            <li>
                <b>Type:</b>
                <span>@selectedFile?.ContentType</span>
            </li>
            <li>
                <b>Last Modified On:</b>
                <span>@selectedFile?.LastModified.ToLocalTime().ToString("MMMM dd, yyyy hh:mm tt")</span>
            </li>
            <li>
                <b>File Size:</b>
                <span>@GetReadableFileSizeText(selectedFile?.Size)</span>
            </li>
        </ul>
    </div>

    <!-- File Input -->
    <div class="file-upload-wrapper">
        <label for="file-upload" class="file-upload-box">
            Click or drag an image file here to upload
        </label>
        <InputFile id="file-upload" class="hidden-input" OnChange="HandleFileSelection" />
        <div style="display:grid;margin-top:0.5em;">
            <button @onclick="ClearFile" class="btn-primary" style="border:none;padding:0.85em;border-radius:0.5em;font-weight:400;">
                Clear
            </button>
        </div>
    </div>
</div>

@code {
    private IBrowserFile selectedFile;
    private string imagePreviewUrl;
    private const long MaximumFileSizeForBase64 = 512000; // 500 KB
    private string? pdfDataUrl;

    private async Task LoadPdf(IBrowserFile file)
    {
        using var stream = file.OpenReadStream(file.Size);
        using var ms = new MemoryStream();
        await stream.CopyToAsync(ms);
        var base64 = Convert.ToBase64String(ms.ToArray());
        pdfDataUrl = $"data:application/pdf;base64,{base64}";
    }

    async Task<string> GetBase64FromFile(IBrowserFile file)
    {
        try 
        {
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);
            var base64 = Convert.ToBase64String(buffer);
            return $"data:{file.ContentType};base64,{base64}";
        }
        catch
        {
            return null;
        }
    }

    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        var file = e.File;
        bool isImage = file.ContentType.StartsWith("image/");
        bool isPDF = file.ContentType == "application/pdf";

        if (file != null)
        {
            selectedFile = file;
            imagePreviewUrl = "";

            if (isImage)
            {
                // Use JavaScript to compress and convert image to base64
                var url = await JSRuntime.InvokeAsync<string>("compressAndConvertImageToBase64FromInput");
                imagePreviewUrl = url;
            }
            else if (isPDF)
            {
                await LoadPdf(file);
            }
        }
        else
        {
            ClearFile();
        }
    }

    string GetReadableFileSizeText(long? fileSizeInBytes)
    {
        if (!fileSizeInBytes.HasValue || fileSizeInBytes.Value < 0)
        {
            return "";
        }

        double size = fileSizeInBytes.Value;
        string[] units = { "Bytes", "KB", "MB", "GB", "TB" };
        int unitIndex = 0;

        while (size >= 1024 && unitIndex < units.Length - 1)
        {
            size /= 1024;
            unitIndex++;
        }

        return unitIndex == 0
            ? $"{size:0} {units[unitIndex]}"
            : $"{size:0.00} {units[unitIndex]}";
    }

    void ClearFile()
    {
        selectedFile = null;
        imagePreviewUrl = null;
    }
}